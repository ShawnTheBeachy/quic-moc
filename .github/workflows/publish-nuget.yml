name: Publish NuGet packages
on:
  workflow_dispatch:
  pull_request:
    branches:
      - '*'
  release:
    types:
      - published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  create_nuget:
    name: Create NuGet packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '9.x' ]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up .NET SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Pack main project
        run: dotnet pack src/QuicMoc/QuicMoc.csproj --configuration Release --output ${{ env.NuGetDirectory }}
      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          retention-days: 2
          path: ${{ env.NuGetDirectory }}/*.nupkg

  validate_nuget:
    name: Validate NuGet packages
    runs-on: ubuntu-latest
    needs: [ create_nuget ]
    strategy:
      matrix:
        dotnet-version: [ '9.x' ]
    steps:
      - name: Set up .NET SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Download NuGet packages
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ${{ env.NuGetDirectory }}
      - name: Install NuGet validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global
      - name: Validate package
        run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg")

  run_tests:
    name: Run tests
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '9.x' ]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up .NET SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Cache packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: ${{ runner.os }}-nuget
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Test
        run: dotnet test --no-restore --no-build --verbosity normal

  deploy:
    name: Deploy NuGet package
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ validate_nuget, run_tests ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ${{ env.NuGetDirectory }}
      - name: Set up .NET SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }

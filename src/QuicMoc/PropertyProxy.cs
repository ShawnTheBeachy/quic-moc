using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace QuicMoc;

internal static class PropertyProxy
{
    public static IncrementalGeneratorPostInitializationContext AddPropertyProxySource(
        this IncrementalGeneratorPostInitializationContext context
    )
    {
        context.AddSource(
            "PropertyProxy.g.cs",
            SourceText.From(
                $$"""
                // <auto-generated />
                namespace {{Constants.Namespace}};

                public sealed class PropertyProxy<T>
                {
                    private T _value;

                    public PropertyProxy()
                    {
                        _value = default(T)!;
                    }

                    public PropertyProxy(T value)
                    {
                        _value = value;
                    }

                    public void Returns(T value) => _value = value;

                    public static implicit operator T(PropertyProxy<T> proxy) => proxy._value;

                    public static implicit operator PropertyProxy<T>(T value) => new(value);
                }
                """,
                Encoding.UTF8
            )
        );
        return context;
    }
}

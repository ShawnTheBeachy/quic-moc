using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using QuicMoc.Models;

namespace QuicMoc.Sources;

internal static class PropertyMock
{
    public const string ClassName = "PropertyMock";

    public static IncrementalGeneratorPostInitializationContext AddPropertyMockSource(
        this IncrementalGeneratorPostInitializationContext context
    )
    {
        context.AddSource(
            $"{ClassName}.g.cs",
            SourceText.From(
                $$"""
                // <auto-generated />
                namespace {{Constants.Namespace}};

                public record struct {{ClassName}}<T>
                {
                    private T _value;

                    public {{ClassName}}()
                    {
                        _value = default(T)!;
                    }

                    public {{ClassName}}(T value)
                    {
                        _value = value;
                    }

                    public override int GetHashCode() => _value.GetHashCode();
                    
                    public override string ToString() => _value.ToString();

                    public static implicit operator T({{ClassName}}<T> mock) => mock._value;

                    public static implicit operator {{ClassName}}<T>(T value) => new(value);
                }
                
                """,
                Encoding.UTF8
            )
        );
        return context;
    }

    public static string MockProperties(this MockGenerationTarget target)
    {
        var props = new string[target.Properties.Count];

        for (var i = 0; i < target.Properties.Count; i++)
        {
            var prop = target.Properties[i];
            var source = $$"""
                #region {{prop.Name}}
                {{prop.Type.Name}} {{target.FullTypeName}}.{{prop.Name}} {{(
                    prop.IsReadOnly ? MockReadOnlyProperty(prop) : MockProperty(prop)
                )}}
                public {{ClassName}}<{{prop.Type.Name}}> {{prop.Name}} { get; set; } = new();
                #endregion {{prop.Name}}
                """;
            props[i] = source;
        }

        return string.Join("\n\n", props);
    }

    private static string MockProperty(IPropertySymbol property) =>
        $$"""
            {
                get => {{property.Name}};
                set => {{property.Name}} = value;
            }
            """;

    private static string MockReadOnlyProperty(IPropertySymbol property) => $" => {property.Name};";
}
